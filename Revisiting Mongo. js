# //1. Retrieve all employees in the Engineering department, only showing their names and project titles.

> db.employees.find(
  { department: "Engineering" },
  { _id: 0, name: 1, "projects.title": 1 }
);

# 2. Find employees who are working on the "AI Chatbot" project.

> db.employees.find(
  { "projects.title": "AI Chatbot" },
  { _id: 0, name: 1, email: 1 }
);

# 3. Sort employees by their joining date (newest first).

> db.employees.find().sort({ joinedAt: -1 });

# 4. Count the employees who are handling at least one project with progress > 50%.

> db.employees.countDocuments(
  { "projects.progress": { $gt: 50 } }
);

# 5. Get employees who joined in the last 12 months.

> db.employees.find(
  { joinedAt: { $gte: new Date(new Date().setFullYear(new Date().getFullYear() - 1)) } }
);

# 6. Retrieve only emails of all employees.

> db.employees.find({}, { _id: 0, email: 1 });

# 7. Find employees with an email ending in "@company.com".

> db.employees.find(
  { email: /@company\.com$/ },
  { _id: 0, name: 1, email: 1 }
);

# 8. Get the average age of all employees.

> db.employees.aggregate([
  { $group: { _id: null, averageAge: { $avg: "$age" } } }
]);

# 9. Find the highest-budget project.

> db.employees.aggregate([
  { $unwind: "$projects" },
  { $sort: { "projects.budget": -1 } },
  { $limit: 1 }
]);

# 10. Get employees who have not been assigned any projects.

> db.employees.find(
  { projects: { $size: 0 } }
);

# 11. Sort employees by the number of projects they are managing (Descending order).

> db.employees.aggregate([
  { $addFields: { projectCount: { $size: "$projects" } } },
  { $sort: { projectCount: -1 } }
]);

# 12. Retrieve employees who are handling at least 2 projects.

> db.employees.find(
  { projects: { $size: { $gte: 2 } } }
);

# 13. Find employees working on projects with budgets greater than 50,000.

> db.employees.find(
  { "projects.budget": { $gt: 50000 } },
  { _id: 0, name: 1, "projects.title": 1 }
);

# 14. Count how many employees are above 30 years old.

> db.employees.countDocuments(
  { age: { $gt: 30 } }
);

# 15. Get the total number of unique projects assigned to employees.

> db.employees.aggregate([
  { $unwind: "$projects" },
  { $group: { _id: "$projects.projectId" } },
  { $count: "uniqueProjects" }
]);

# 16. Retrieve employees working on the "Supply Chain Optimization" project with progress above 50%.

> db.employees.find(
  { "projects.title": "Supply Chain Optimization", "projects.progress": { $gt: 50 } }
);

# 17. Find employees who are working on either "Brand Awareness Survey" or "Cloud Migration".

> db.employees.find(
  { "projects.title": { $in: ["Brand Awareness Survey", "Cloud Migration"] } }
);

# 18. Retrieve employees who are working on any project with progress greater than 70%.

> db.employees.find(
  { "projects.progress": { $gt: 70 } }
);

# 19. Get employees who have not been assigned to the "Employee Wellness Program" project.

> db.employees.find(
  { "projects.title": { $ne: "Employee Wellness Program" } }
);

# 20. Find employees who joined before January 1, 2022.

> db.employees.find(
  { joinedAt: { $lt: new Date("2022-01-01") } }
);

