// Connect to MongoDB and Redis
//MongoDB Model (models/Product.js)

let mongoose = require("mongoose");

let productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  price: { type: Number, required: true },
  description: { type: String },
});

module.exports = mongoose.model("Product", productSchema);
// Set Up Redis Connection (config/redisClient.js)
//Create a file to handle Redis connections.


let { createClient } = require("redis");
require("dotenv").config();

let redisClient = createClient({
  url: process.env.REDIS_URI, // e.g., redis://localhost:6379
});

redisClient.on("error", (err) => console.error("Redis Error:", err));

(async () => {
  await redisClient.connect();
})();

module.exports = redisClient;
// Implement API with Redis Caching
//Product Routes (routes/productRoutes.js)
//Handles product fetching and caching.


let express = require("express");
let Product = require("../models/Product");
let redisClient = require("../config/redisClient");

let router = express.Router();

// Get product by ID with caching
router.get("/product/:id", async (req, res) => {
  try {
    let productId = req.params.id;

    // Check Redis cache
    let cachedProduct = await redisClient.get(`product:${productId}`);
    if (cachedProduct) {
      console.log("Cache Hit");
      return res.json(JSON.parse(cachedProduct));
    }

    // Fetch from MongoDB
    let product = await Product.findById(productId);
    if (!product) {
      return res.status(404).json({ message: "Product not found" });
    }

    // Store in Redis with a 60-second expiry
    await redisClient.setEx(`product:${productId}`, 60, JSON.stringify(product));

    console.log("Cache Miss - Fetching from DB");
    res.json(product);
  } catch (error) {
    res.status(500).json({ message: "Error fetching product", error });
  }
});

module.exports = router;
// Implement Cache Invalidation
If a product is updated, remove it from Redis.

Product Update Route

router.put("/product/:id", async (req, res) => {
  try {
    let { name, price, description } = req.body;
    let productId = req.params.id;

    // Update the product in the database
    let updatedProduct = await Product.findByIdAndUpdate(
      productId,
      { name, price, description },
      { new: true }
    );

    if (!updatedProduct) {
      return res.status(404).json({ message: "Product not found" });
    }

    // Remove from Redis cache
    await redisClient.del(`product:${productId}`);

    // Publish update event
    await redisClient.publish("productUpdate", productId);

    res.json(updatedProduct);
  } catch (error) {
    res.status(500).json({ message: "Error updating product", error });
  }
});
// Implement Redis Pub/Sub
This notifies other services when a product is updated.

Subscriber Service (services/productSubscriber.js)

let redisClient = require("../config/redisClient");

let subscribeToProductUpdates = async () => {
  let subscriber = redisClient.duplicate();
  await subscriber.connect();

  subscriber.subscribe("productUpdate", (productId) => {
    console.log(`ðŸ”” Product ${productId} was updated. Clearing cache...`);
  });
};

subscribeToProductUpdates();
// Set Up Server (server.js)
Load Routes and Start Server

require("dotenv").config();
let express = require("express");
let mongoose = require("mongoose");
let productRoutes = require("./routes/productRoutes");
require("./services/productSubscriber"); // Start Redis subscriber

let app = express();
app.use(express.json());

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

app.use("/api", productRoutes);

let PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
