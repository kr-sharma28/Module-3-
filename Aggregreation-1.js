// Aggregation queries for sales collection in MongoDB

// 1. Calculate the total revenue generated from each region
db.sales.aggregate([
  { $group: { _id: "$region", totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } } } }
]);

// 2. Find the total quantity sold for each product
db.sales.aggregate([
  { $group: { _id: "$product", totalQuantity: { $sum: "$quantity" } } }
]);

// 3. Determine the average revenue per order
db.sales.aggregate([
  { $project: { totalPrice: { $multiply: ["$price", "$quantity"] } } },
  { $group: { _id: null, avgRevenuePerOrder: { $avg: "$totalPrice" } } }
]);

// 4. Count the total number of orders placed by each customer
db.sales.aggregate([
  { $group: { _id: "$customer", totalOrders: { $sum: 1 } } }
]);

// 5. Identify the most expensive products in descending order
db.sales.aggregate([
  { $sort: { price: -1 } }
]);

// 6. Retrieve all orders where the quantity purchased is greater than 1
db.sales.find({ quantity: { $gt: 1 } });

// 7. Sort regions based on their total revenue in descending order
db.sales.aggregate([
  { $group: { _id: "$region", totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } } } },
  { $sort: { totalRevenue: -1 } }
]);

// 8. Extract the year and month from the date field for each order
db.sales.aggregate([
  { $project: { year: { $year: "$date" }, month: { $month: "$date" } } }
]);

// 9. Group the total revenue based on tags (e.g., electronics, personal)
db.sales.aggregate([
  { $unwind: "$tags" },
  { $group: { _id: "$tags", totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } } } }
]);

// 10. Calculate both the total number of orders and total revenue in a single query
db.sales.aggregate([
  { $group: { _id: null, totalOrders: { $sum: 1 }, totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } } } }
]);

// 11. Create a new field to store the total price as price Ã— quantity for each order
db.sales.aggregate([
  { $addFields: { totalPrice: { $multiply: ["$price", "$quantity"] } } }
]);

// 12. Calculate the total revenue generated by each customer
db.sales.aggregate([
  { $group: { _id: "$customer", totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } } } }
]);

// 13. Retrieve all orders that include the personal tag
db.sales.find({ tags: "personal" });

// 14. Get a distinct list of all customers who placed orders
db.sales.distinct("customer");

// 15. Calculate the total revenue generated by selling laptops only
db.sales.aggregate([
  { $match: { product: "laptop" } },
  { $group: { _id: null, totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } } } }
]);
